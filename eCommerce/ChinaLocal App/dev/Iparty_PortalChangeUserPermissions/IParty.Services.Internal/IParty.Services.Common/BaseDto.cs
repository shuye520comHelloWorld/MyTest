using ServiceStack;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IParty.Services.Common
{
    public abstract class BaseRequestDto
    {
        [ApiMember(Name = "Device", ParameterType = "body", Description = "the device name of the client", DataType = "string", IsRequired = true)]
        public string Device { get; set; }

        [ApiMember(Name = "DeviceOS", ParameterType = "body", Description = "the device OS of the client", DataType = "string", IsRequired = true)]
        public string DeviceOS { get; set; }

        [ApiMember(Name = "DeviceVersion", ParameterType = "body", Description = "the device version of the client", DataType = "string", IsRequired = true)]
        public string DeviceVersion { get; set; }

        public string _SubsidiaryCode { get; set; }
        public string _ClientKey { get; set; }
        public string _UserName { get; set; }
        public string _Culture { get; set; }
        public string _UICulture { get; set; }
        public long _UserId { get; set; }
        public string _Timezone { get; set; }
        public string UnionID { get; set; }
    }

    public abstract class BaseResponseDto
    {
        public ResponseStatus ResponseStatus { get; set; }
    }

    public abstract class CommandRequestDto : BaseRequestDto
    {
        [ApiMember(Name = "CommandId", ParameterType = "body", Description = "the unique command identifier generated by client, same command only gets processed once.", DataType = "guid", IsRequired = true)]
        public Guid CommandId { get; set; }

        public CommandRequestDto() : base() { }
    }

    public abstract class CommandResponseDto : BaseResponseDto
    {
        public CommandResponseDto() : base() { }
    }
    public abstract class QueryRequestDto : BaseRequestDto
    {
        [ApiMember(Name = "Sort", ParameterType = "query", Description = "indicate sorting order, e.g. ?sort=-Name, -Name means order by Name descendingly", DataType = "string", IsRequired = false)]
        public string Sort { get; set; }

        [ApiMember(Name = "Limit", ParameterType = "query", Description = "indicate pagination, e.g. ?limit=50&offset=100", IsRequired = false)]
        public int Limit { get; set; }

        [ApiMember(Name = "Offset", ParameterType = "query", Description = "indicate pagination, e.g. ?limit=50&offset=100", DataType = "int", IsRequired = false)]
        public int Offset { get; set; }

        public QueryRequestDto()
            : base()
        {
            Offset = 1;
            Limit = 50;
        }
    }


    public abstract class QueryResponseDto : BaseResponseDto
    {
        public QueryResponseDto() : base() { }

        public MetaData _metaData { get; set; }
    }

    public interface ResponseMessage
    {
        string ErrorMessage { get; set; }
    }

    public class MetaData
    {
        public long? Total { get; set; }
        public int? Limit { get; set; }
        public long? Offset { get; set; }
    }
}
